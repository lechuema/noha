<?php

namespace App\Controller\Admin;

use App\Entity\Admin;
use Doctrine\ORM\EntityManagerInterface;
use EasyCorp\Bundle\EasyAdminBundle\Config\Crud;
use EasyCorp\Bundle\EasyAdminBundle\Controller\AbstractCrudController;
use EasyCorp\Bundle\EasyAdminBundle\Field\FormField;
use EasyCorp\Bundle\EasyAdminBundle\Field\TextField;
use PhpParser\Node\Scalar\String_;
use Symfony\Component\Form\Extension\Core\Type\PasswordType;
use Symfony\Component\PasswordHasher\Hasher\UserPasswordHasherInterface;
use Symfony\Component\Security\Core\Encoder\EncoderFactory;
use Symfony\Component\Security\Core\Encoder\MessageDigestPasswordEncoder;

class AdminCrudController extends AbstractCrudController
{
    public static function getEntityFqcn(): string
    {
        return Admin::class;
    }

    public function updateEntity(EntityManagerInterface $entityManager, $entityInstance): void
    {
        $encodedPassword = $this->encodePassword($entityInstance, $entityInstance->getPassword());
        $entityInstance->setPassword($encodedPassword);
        parent::updateEntity($entityManager, $entityInstance); // TODO: Change the autogenerated stub
    }

    public function persistEntity(EntityManagerInterface $entityManager, $entityInstance): void
    {
        $encodedPassword = $this->encodePassword($entityInstance, $entityInstance->getPassword());
        $entityInstance->setPassword($encodedPassword);
        parent::persistEntity($entityManager, $entityInstance); // TODO: Change the autogenerated stub
    }

    private function encodePassword($admin, $password)
    {
        $passwordEncoderFactory = new EncoderFactory([
            Admin::class => new MessageDigestPasswordEncoder('sha512', true, 5000)
        ]);

        $encoder = $passwordEncoderFactory->getEncoder($admin);

        return $encoder->encodePassword($password, $admin->getSalt());
    }

    public function configureFields(string $pageName): iterable
    {
        $usuario = TextField::new('userName');
        $contrasenia = TextField::new('password')->setFormType(PasswordType::class);
        $nombre = TextField::new('nombre');
        $apellido = TextField::new('apellido');
        switch ($pageName) {
            case Crud::PAGE_INDEX:
            {
                return [$usuario, $contrasenia, $nombre, $apellido];
                break;
            }
            case Crud::PAGE_NEW:
            {
                return [$usuario, $contrasenia, $nombre, $apellido];
                break;
            }
            case Crud::PAGE_EDIT:
            {
                return [$usuario, $contrasenia, $nombre, $apellido];
                break;
            }
            case Crud::PAGE_DETAIL:
            {
                return [$usuario, $contrasenia, $nombre, $apellido];
                break;
            }
        }
    }
}
